# 포트 80은 port를 생략해도 되는 포트이다.
server.port=80

## DB 소스 연결 방법
spring.datasource.username=user02
spring.datasource.password=user02
spring.datasource.url=jdbc:mysql://localhost:3306/user02
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver

#### Hibernate ####

# table 생성
spring.jpa.hibernate.ddl-auto=none

## create : 기존 테이블 삭제 후 다시 생성
## create-drop :create과 같으나 application 종료시점에 table drop(테이블 없어짐)
## update : 변경 된 부분만 적용
## validate : 내가 만들테이블과 내가 가진 테이블과 일치하는지 확인 / 엔티티(VO)와 테이블이 정상적으로 매핑되었는지 확인
## none : 사용하지 않을 때
## 개발시에는 편의를 위해서 create, create-drop
## 운영시에는 주로 update, validate, none 

###### camel표기법 > 언더바로 들어감 ######
# VO클래스의 멤버변수명이 자동으로 DB에 컬럼명과 연결 될 때 (camel: 아래설정입력 / snake: 입력할 필요 x)
# regDate 의 형태(camel 표기법)면 설정이 필요
# 멤버변수가 reg_date 의 형태면 설정이 필요없음(snake 표기법)
spring.jpa.hibernate.naming.physical-strategy=org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl


#####JPA에 의해서 자동으로 생성되고 실행되는 SQL문을 실시간으로 출력하는 설정을 할 수 있다.
logging.level.org.hibernate.sql=debug

##### ? 에 매핑되는 파라미터 값을 출력
logging.level.org.hibernate.type.descriptor.sql.BasicBinder=TRACE

##### 하이버네이트가 실행한 SQL 출력
spring.jpa.show-sql=true
##### 하이버네이트가 실행할 SQL을 출력할 때 보기 쉽게 출력
spring.jpa.properties.hibernate.format_sql=true

#### transaction 처리
spring.aop.proxy-target-class=true


########################################################################


spring.mvc.view.prefix=/WEB-INF/views/
spring.mvc.view.suffix=.jsp

## message 파일위치
spring.messages.basename=message/message
## 인코딩 설정
spring.messages.encoding=UTF-8

## 메세지 코디(키)가 없는 경우
# 예외를 발생 시키지 않고 코드 자체를 출력한다.
spring.messages.use-code-as-default-message=true



## 
board.member.filePath=upload/member
board.notice.filePath=upload/notice